// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum

enum ObjectState {
  ACTIVE
  DELETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  COMPLETED
  CANCELLED
}

enum Payment {
  cash
  momo
  paypal
}

// Model
model PetType {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  parent     PetType?    @relation("PetCategoryParent", fields: [parent_id], references: [id])
  parent_id  Int?
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  children   PetType[]   @relation("PetCategoryParent")
  pets       Pet[]
}

model Pet {
  id                 Int                @id @default(autoincrement())
  sku                String             @unique @db.VarChar(255)
  name               String             @db.VarChar(255)
  stock_quantity     Int                @default(0)
  price              Float              @default(0)
  thumbnail_image    String             @default("") @db.VarChar(255)
  description_images String[]           @default([])
  age                Int                @default(0)
  isMale             Boolean            @default(true)
  color              String             @default("") @db.VarChar(255)
  weight             Float              @default(0)
  height             Float              @default(0)
  birthday           DateTime?
  origin             String             @default("") @db.VarChar(255)
  description        String             @default("") @db.VarChar(255)
  type               PetType            @relation(fields: [type_id], references: [id])
  type_id            Int
  state              ObjectState        @default(ACTIVE)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  product_feedbacks  ProductFeedback[]
  product_promotions ProductPromotion[]
  order_details      OrderDetail[]
  cart_items         CartItem[]
}

model AccessoryType {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  parent      AccessoryType?  @relation("AccessoryCategoryParent", fields: [parent_id], references: [id])
  parent_id   Int?
  state       ObjectState     @default(ACTIVE)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  deleted_at  DateTime?
  children    AccessoryType[] @relation("AccessoryCategoryParent")
  accessories Accessory[]
}

model Accessory {
  id                 Int                @id @default(autoincrement())
  sku                String             @unique @db.VarChar(255)
  name               String             @db.VarChar(255)
  stock_quantity     Int                @default(0)
  price              Float              @default(0)
  thumbnail_image    String             @default("") @db.VarChar(255)
  description_images String[]           @default([])
  origin             String             @default("") @db.VarChar(255)
  description        String             @default("") @db.VarChar(255)
  weight             Float              @default(0)
  type               AccessoryType      @relation(fields: [type_id], references: [id])
  type_id            Int
  state              ObjectState        @default(ACTIVE)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  product_feedbacks  ProductFeedback[]
  product_promotions ProductPromotion[]
  order_details      OrderDetail[]
  cart_items         CartItem[]
}

model ProductFeedback {
  id           Int         @id @default(autoincrement())
  pet          Pet?        @relation(fields: [pet_id], references: [id])
  pet_id       Int?
  accessory    Accessory?  @relation(fields: [accessory_id], references: [id])
  accessory_id Int?
  user         User        @relation(fields: [user_id], references: [id])
  user_id      Int
  rating       Float       @default(0)
  content      String      @db.VarChar(255)
  state        ObjectState @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
}

model Promotion {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(255)
  description        String             @default("") @db.VarChar(255)
  start_date         DateTime
  end_date           DateTime
  state              ObjectState        @default(ACTIVE)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  product_promotions ProductPromotion[]
}

model ProductPromotion {
  id           Int         @id @default(autoincrement())
  pet          Pet?        @relation(fields: [pet_id], references: [id])
  pet_id       Int?
  accessory    Accessory?  @relation(fields: [accessory_id], references: [id])
  accessory_id Int?
  promotion    Promotion   @relation(fields: [promotion_id], references: [id])
  promotion_id Int
  state        ObjectState @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
}

model Cart {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [user_id], references: [id])
  user_id        Int
  total_quantity Int         @default(0)
  total_price    Float       @default(0)
  state          ObjectState @default(ACTIVE)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  deleted_at     DateTime?
  cart_items     CartItem[]

  @@unique([user_id], name: "user_id_unique")
}

model CartItem {
  id           Int         @id @default(autoincrement())
  cart         Cart        @relation(fields: [cart_id], references: [id])
  cart_id      Int
  pet          Pet?        @relation(fields: [pet_id], references: [id])
  pet_id       Int?
  accessory    Accessory?  @relation(fields: [accessory_id], references: [id])
  accessory_id Int?
  quantity     Int         @default(0)
  total_price  Float       @default(0)
  state        ObjectState @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
}

model Order {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [user_id], references: [id])
  user_id       Int
  order_status  OrderStatus   @default(PENDING)
  payment       Payment       @default(cash)
  state         ObjectState   @default(ACTIVE)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  deleted_at    DateTime?
  order_details OrderDetail[]
}

model OrderDetail {
  id           Int         @id @default(autoincrement())
  order        Order       @relation(fields: [order_id], references: [id])
  order_id     Int
  pet          Pet?        @relation(fields: [pet_id], references: [id])
  pet_id       Int?
  accessory    Accessory?  @relation(fields: [accessory_id], references: [id])
  accessory_id Int?
  quantity     Int         @default(0)
  price        Float       @default(0)
  state        ObjectState @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?

  @@unique([order_id, pet_id, accessory_id], name: "order_pet_accessory_unique")
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(255)
  email              String            @unique @db.VarChar(255)
  phone              String            @db.VarChar(255)
  username           String            @db.VarChar(255)
  password           String            @db.VarChar(255)
  // address            String?           @default("") @db.VarChar(255)
  avatar_url         String?           @default("") @db.VarChar(255)
  facebook_id        String?           @default("") @db.VarChar(255)
  google_id          String?           @default("") @db.VarChar(255)
  is_admin           Boolean           @default(false)
  is_locked          Boolean           @default(false)
  verification_token String            @db.VarChar(255)
  is_verified        Boolean           @default(false)
  verified_at        DateTime?
  state              ObjectState       @default(ACTIVE)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  deleted_at         DateTime?
  key_store          KeyStore[]
  product_feedbacks  ProductFeedback[]
  carts              Cart[]
  orders             Order[]
}

model KeyStore {
  id            Int         @id @default(autoincrement())
  client        User        @relation(fields: [client_id], references: [id])
  client_id     Int
  refresh_token String      @db.VarChar(255)
  state         ObjectState @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
}
