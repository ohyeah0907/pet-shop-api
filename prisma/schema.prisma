// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum

enum ObjectState {
  ACTIVE
  DELETED
}

enum DeviceType {
  LIGHT
  SWITCH
  TV
  AIRCONDITION
  CURTAIN
}

enum ActionableType {
  Filter
  Script
  Automation
  Device
  Sensor
}

// Model

model Cloud {
  id           Int          @id @default(autoincrement())
  ip           String       @unique @db.VarChar(255)
  domain       String       @unique @db.VarChar(255)
  state        ObjectState  @default(ACTIVE)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
  home_clouds HomeCloud[]
}

model HomeCloud {
  id                  Int         @id @default(autoincrement())
  cloud               Cloud       @relation(fields: [cloud_id], references: [id])
  cloud_id            Int
  home               Home       @relation("Home", fields: [home_id], references: [id])
  home_id            Int
  vpn_ip              String      @db.VarChar(255)
  private_key         String      @db.VarChar(255)
  public_key          String      @db.VarChar(255)
  pre_shared_key      String      @db.VarChar(255)
  cloud_port          Int         @db.Integer
  state               ObjectState @default(ACTIVE)
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  deleted_at          DateTime?
  active_home_clouds Home[]     @relation("ActiveHomeCloud")

  @@unique([cloud_id, home_id], name: "unique_cloud_home")
}

model Home {
  id                    Int          @id @default(autoincrement())
  name                  String       @db.VarChar(255)
  address               String       @db.VarChar(255)
  lan_ip                String       @db.VarChar(255)
  lan_port              Int          @db.Integer
  wan_domain            String       @unique @db.VarChar(255)
  wan_port              Int          @db.Integer
  image_url             String       @db.VarChar(255)
  active_home_cloud    HomeCloud?  @relation("ActiveHomeCloud", fields: [active_home_cloud_id], references: [id])
  active_home_cloud_id Int?         @db.Integer
  state                 ObjectState  @default(ACTIVE)
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  deleted_at            DateTime?
  roles                 Role[]
  home_clouds          HomeCloud[] @relation("Home")
  rooms                 Room[]
  cameras               Camera[]
  scripts               Script[]
  automations           Automation[]
  devices               Device[]
  sensors               Sensor[]
  ha_entities           HAEntity[]
  role_homes           RoleHome[]
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  home       Home       @relation(fields: [home_id], references: [id])
  home_id    Int
  is_owner    Boolean     @default(false)
  state       ObjectState @default(ACTIVE)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?
  role_homes RoleHome[]
}

model User {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(255)
  email              String             @unique @db.VarChar(255)
  phone              String             @db.VarChar(255)
  username           String             @unique @db.VarChar(255)
  password           String             @db.VarChar(255)
  is_admin           Boolean            @default(false)
  is_locked          Boolean            @default(false)
  is_voice           Boolean            @default(false)
  state              ObjectState        @default(ACTIVE)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  key_store          KeyStore[]
  user_homes        UserHome[]
  sessions           Session[]
  rooms              Room[]
  user_tags          UserTag[]
  user_notifications UserNotification[]
}

model UserHome {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [user_id], references: [id])
  user_id       Int
  role_home    RoleHome   @relation(fields: [role_home_id], references: [id])
  role_home_id Int
  ha_username   String      @db.VarChar(255)
  ha_password   String      @db.VarChar(255)
  ordering      Int         @db.Integer
  state         ObjectState @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
}

model KeyStore {
  id            Int         @id @default(autoincrement())
  client        User        @relation(fields: [client_id], references: [id])
  client_id     Int
  primary_key   String      @db.VarChar(255)
  secondary_key String      @db.VarChar(255)
  state         ObjectState @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
}

model Room {
  id                   Int            @id @default(autoincrement())
  home                Home          @relation(fields: [home_id], references: [id])
  home_id             Int
  // parent               Room?          @relation("ParentRoom", fields: [parent_id], references: [id])
  // parent_id            Int?           @db.Integer
  user                 User           @relation(fields: [user_id], references: [id])
  user_id              Int
  name                 String         @db.VarChar(255)
  image_url            String         @db.VarChar(255)
  is_home              Boolean        @default(false)
  ordering             Int            @db.Integer
  state                ObjectState    @default(ACTIVE)
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt
  deleted_at           DateTime?
  // children             Room[]         @relation("ParentRoom")
  room_cameras         RoomCamera[]
  actionables          Actionable[]
  room_devices         RoomDevice[]
  room_shortcuts       RoomShortcut[] @relation("MainRoom")
  room_shortcut_others RoomShortcut[] @relation("OrtherRoom")
}

model Session {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [user_id], references: [id])
  user_id      Int
  token        String      @unique @db.VarChar(255)
  ip           String      @db.VarChar(255)
  location     String      @db.VarChar(255)
  user_agent   String      @db.VarChar(255)
  device       String      @db.VarChar(255)
  platform     String      @db.VarChar(255)
  finger_print String      @db.VarChar(255)
  accessed_at  DateTime
  expired_at   DateTime
  state        ObjectState @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
}

model Filter {
  id             Int         @id @default(autoincrement())
  device_type    DeviceType  @unique
  name           String      @db.VarChar(255)
  icon           String      @db.VarChar(255)
  background_on  String      @db.VarChar(255)
  background_off String      @db.VarChar(255)
  color_on       String      @db.VarChar(255)
  color_off      String      @db.VarChar(255)
  state          ObjectState @default(ACTIVE)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  deleted_at     DateTime?
}

model Camera {
  id              Int          @id @default(autoincrement())
  home           Home        @relation(fields: [home_id], references: [id])
  home_id        Int
  camera_brand    CameraBrand  @relation(fields: [camera_brand_id], references: [id])
  camera_brand_id Int
  username        String       @db.VarChar(255)
  password        String       @db.VarChar(255)
  name            String       @db.VarChar(255)
  lan_ip          String       @db.VarChar(255)
  lan_port        Int          @db.Integer
  lan_uri         String       @db.VarChar(255)
  wan_ip          String       @db.VarChar(255)
  wan_port        Int          @db.Integer
  wan_uri         String       @db.VarChar(255)
  cloud_domain    String       @db.VarChar(255)
  cloud_port      Int          @db.Integer
  cloud_uri       String       @db.VarChar(255)
  state           ObjectState  @default(ACTIVE)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  deleted_at      DateTime?
  room_cameras    RoomCamera[]
  presets         Preset[]
}

model RoomCamera {
  id         Int         @id @default(autoincrement())
  room       Room        @relation(fields: [room_id], references: [id])
  room_id    Int
  camera     Camera      @relation(fields: [camera_id], references: [id])
  camera_id  Int
  pinned     Boolean     @default(false)
  ordering   Int         @db.Integer
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?

  @@unique([room_id, camera_id], name: "room_camera_unique")
}

model Preset {
  id         Int         @id @default(autoincrement())
  camera     Camera      @relation(fields: [camera_id], references: [id])
  camera_id  Int
  name       String      @db.VarChar(255)
  url        String      @db.VarChar(255)
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  devices    Device[]
}

model Script {
  id          Int         @id @default(autoincrement())
  home       Home       @relation(fields: [home_id], references: [id])
  home_id    Int
  entity_id   String      @db.VarChar(255)
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  accessed_at DateTime
  state       ObjectState @default(ACTIVE)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?

  @@unique([home_id, entity_id], name: "script_entity_unique")
}

model Automation {
  id          Int         @id @default(autoincrement())
  home       Home       @relation(fields: [home_id], references: [id])
  home_id    Int
  entity_id   String      @db.VarChar(255)
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  accessed_at DateTime
  state       ObjectState @default(ACTIVE)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?

  @@unique([home_id, entity_id], name: "automation_entity_unique")
}

model Sensor {
  id         Int         @id @default(autoincrement())
  home      Home       @relation(fields: [home_id], references: [id])
  home_id   Int
  entity_id  String      @db.VarChar(255)
  name       String      @db.VarChar(255)
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?

  @@unique([home_id, entity_id], name: "sensor_entity_unique")
}

model Device {
  id           Int          @id @default(autoincrement())
  home        Home        @relation(fields: [home_id], references: [id])
  home_id     Int
  entity_id    String       @db.VarChar(255)
  type         DeviceType
  sub_type     String       @db.VarChar(255)
  name         String       @db.VarChar(255)
  description  String       @db.VarChar(255)
  status       Boolean      @default(false)
  attributes   String       @db.Text
  preset       Preset?      @relation(fields: [preset_id], references: [id])
  preset_id    Int?
  state        ObjectState  @default(ACTIVE)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  deleted_at   DateTime?
  role_device  RoleDevice[]
  room_devices RoomDevice[]

  @@unique([home_id, entity_id], name: "device_entity_unique")
}

model Actionable {
  id         Int            @id @default(autoincrement())
  room       Room           @relation(fields: [room_id], references: [id])
  room_id    Int
  type_id    Int
  type       ActionableType
  name       String         @db.VarChar(255)
  ordering   Int            @db.Integer
  state      ObjectState    @default(ACTIVE)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  deleted_at DateTime?
}

model CameraBrand {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  url_pattern    String      @db.VarChar(255)
  preset_pattern String      @db.VarChar(255)
  state          ObjectState @default(ACTIVE)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  deleted_at     DateTime?
  cameras        Camera[]
}

model RoleSchedule {
  id             Int            @id @default(autoincrement())
  role_home     RoleHome      @relation(fields: [role_home_id], references: [id])
  role_home_id  Int
  started_at     DateTime
  ended_at       DateTime
  state          ObjectState    @default(ACTIVE)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  deleted_at     DateTime?
  schedule_weeks ScheduleWeek[]
}

model ScheduleWeek {
  id             Int            @id @default(autoincrement())
  schedule       RoleSchedule   @relation(fields: [schedule_id], references: [id])
  schedule_id    Int
  week_day       Int
  enable         Boolean        @default(false)
  state          ObjectState    @default(ACTIVE)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  deleted_at     DateTime?
  schedule_hours ScheduleHour[]
}

model ScheduleHour {
  id            Int          @id @default(autoincrement())
  schedule_week ScheduleWeek @relation(fields: [schedule_week_id], references: [id])
  schedule_week_id   Int
  started_hour  Int
  ended_hour    Int
  state         ObjectState  @default(ACTIVE)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  deleted_at    DateTime?
}

model RoleDevice {
  id            Int         @id @default(autoincrement())
  role_home    RoleHome   @relation(fields: [role_home_id], references: [id])
  role_home_id Int
  device        Device      @relation(fields: [device_id], references: [id])
  device_id     Int
  enabled       Boolean     @default(false)
  state         ObjectState @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?

  @@unique([role_home_id, device_id], name: "role_device_unique")
}

model RoomDevice {
  id          Int         @id @default(autoincrement())
  room        Room        @relation(fields: [room_id], references: [id])
  room_id     Int
  device      Device      @relation(fields: [device_id], references: [id])
  device_id   Int
  ordering    Int         @db.Integer
  is_favorite Boolean     @default(false)
  state       ObjectState @default(ACTIVE)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?

  @@unique([room_id, device_id], name: "room_device_unique")
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  user_tags  UserTag[]
}

model Notification {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(255)
  content            String             @db.VarChar(255)
  deep_link          String             @db.VarChar(255)
  state              ObjectState        @default(ACTIVE)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  user_notifications UserNotification[]
}

model UserTag {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [user_id], references: [id])
  user_id    Int
  tag        Tag         @relation(fields: [tag_id], references: [id])
  tag_id     Int
  state      ObjectState @default(ACTIVE)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?

  @@unique([user_id, tag_id], name: "user_tag_unique")
}

model UserNotification {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [user_id], references: [id])
  user_id         Int
  notification    Notification @relation(fields: [notification_id], references: [id])
  notification_id Int
  is_sent         Boolean      @default(false)
  sent_at         DateTime?
  is_viewed       Boolean      @default(false)
  viewed_at       DateTime?
  state           ObjectState  @default(ACTIVE)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  deleted_at      DateTime?
}

model RoomShortcut {
  id            Int         @id @default(autoincrement())
  room          Room        @relation("MainRoom", fields: [room_id], references: [id])
  room_id       Int
  room_other    Room        @relation("OrtherRoom", fields: [room_other_id], references: [id])
  room_other_id Int
  state         ObjectState @default(ACTIVE)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?

  @@unique([room_id, room_other_id], name: "room_shortcut_unique")
}

model HAEntity {
  id          Int         @id @default(autoincrement())
  home       Home       @relation(fields: [home_id], references: [id])
  home_id    Int
  entity_id   String
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  accessed_at DateTime
  state       ObjectState @default(ACTIVE)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?

  @@unique([home_id, entity_id], name: "home_entity_unique")
}

model RoleHome {
  id             Int            @id @default(autoincrement())
  role           Role           @relation(fields: [role_id], references: [id])
  role_id        Int
  home          Home          @relation(fields: [home_id], references: [id])
  home_id       Int
  state          ObjectState    @default(ACTIVE)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  deleted_at     DateTime?
  user_homes    UserHome[]
  role_devices   RoleDevice[]
  role_schedules RoleSchedule[]

  @@unique([role_id, home_id], name: "role_home_unique")
}
